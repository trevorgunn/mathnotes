<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-LA-practice-problems" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Linear Algebra Problem Generator</title>

  <example>
    <title>Random <m>2 \times 2</m> system</title>
    <sage>
      <input>
        var("x, y")
        A = random_matrix(ZZ, 2, algorithm="echelonizable", rank=2, upper_bound=10)
        # we randomize the solution vector rather than b to control how large the solution is
        b = A * random_vector(ZZ, 2)
        v = vector([x, y])

        print("Equations:")
        for i in range(2):
            print(f"{(A*v)[i]} = {b[i]}")

        print("\nSolution:")
        print(f"(x, y) = {A \ b}")
      </input>
    </sage>
  </example>

  <example>
    <title>Random <m>3 \times 3</m> system</title>
    <sage>
      <input>
        var("x, y, z")
        # feel free to change the rank to 2
        A = random_matrix(ZZ, 3, algorithm="echelonizable", rank=3, upper_bound=10)
        # we randomize the solution vector rather than b to control how large the solution is
        b = A * random_vector(ZZ, 3)
        v = vector([x, y, z])

        print("Equations:")
        for i in range(3):
            print(f"{(A*v)[i]} = {b[i]}")

        print("\nSolution:")
        print(f"(x, y, z) = {A \ b}")
      </input>
    </sage>
  </example>

  <example>
    <title>Random kernel</title>
    <sage>
      <input>
        m = 3
        n = 4
        rank = 2
        A = random_matrix(ZZ, m, n, algorithm="echelonizable", rank=rank, upper_bound=10)

        print(f"A =\n{A}\n\nrref(A) =\n{A.rref()}\n\nker(A) = (as rowspace)\n{A.right_kernel()}")
      </input>
    </sage>
    <solution>
      <sage>
        <input>
          # Test if given vectors is a basis for col(A)
          test = (ZZ^n).submodule([[1, 0, 0, 0], [0, 1, 0, 0]])
          test == A.right_kernel()
        </input>
      </sage>
    </solution>
  </example>

  <example>
    <title>Random column space</title>
    <sage>
      <input>
        m = 3
        n = 4
        rank = 2
        A = random_matrix(ZZ, m, n, algorithm="echelonizable", rank=rank, upper_bound=10)
        A = A.change_ring(QQ)

        print(f"A =\n{A}\n\nrref(A) =\n{A.rref()}\n\ncol(A) = (as rowspace)\n{A.column_space()}")
      </input>
    </sage>
    <solution>
      <sage>
        <input>
          # Test if given vectors is a basis for col(A)
          test = (ZZ^m).submodule([[1, 0, 0], [0, 1, 0]])
          test == A.column_space()
        </input>
      </sage>
    </solution>
  </example>
</section>
